import os
import logging
import openai
import threading
import requests
from datetime import datetime, timedelta
from flask import Flask
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
YCLIENTS_COMPANY_ID = os.getenv("YCLIENTS_COMPANY_ID")
YCLIENTS_API_TOKEN = os.getenv("YCLIENTS_API_TOKEN")
PORT = int(os.getenv("PORT", 5000))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Webhook —É Telegram-–±–æ—Ç–∞ (–¥–ª—è polling)
def delete_webhook():
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook"
    try:
        resp = requests.post(url)
        if resp.status_code == 200:
            logging.info("Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω")
        else:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {resp.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫–ª—é—á–∏—Ç—å webhook: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –•–µ–¥–µ—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YCLIENTS
HEADERS = {
    'Authorization': f'Bearer {YCLIENTS_API_TOKEN}',
    'Content-Type': 'application/json'
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ —Å YCLIENTS

def get_services():
    url = f"https://api.yclients.com/api/v1/companies/{YCLIENTS_COMPANY_ID}/services"
    resp = requests.get(url, headers=HEADERS)
    if resp.status_code == 200:
        return resp.json().get('data', [])
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥ YCLIENTS: {resp.status_code} {resp.text}")
        return []

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ —É—Å–ª—É–≥–µ –∏ –¥–∞—Ç–µ

def get_available_slots(service_id, date_str):
    url = f"https://api.yclients.com/api/v1/records/{YCLIENTS_COMPANY_ID}/available_times"
    params = {
        "service_ids": [service_id],
        "date": date_str
    }
    resp = requests.post(url, headers=HEADERS, json=params)
    if resp.status_code == 200:
        return resp.json().get('data', [])
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω YCLIENTS: {resp.status_code} {resp.text}")
        return []

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_states[message.chat.id] = {'step': 'choose_service'}
    services = get_services()
    if not services:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª—É–≥–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_states[message.chat.id]['services'] = services
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for svc in services:
        keyboard.add(svc['name'])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)

@dp.message_handler()
async def main_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, {})

    if state.get('step') == 'choose_service':
        services = state.get('services', [])
        selected_service = next((s for s in services if s['name'] == text), None)
        if not selected_service:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        user_states[chat_id]['selected_service'] = selected_service
        user_states[chat_id]['step'] = 'choose_date'

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(6):
            day = (datetime.now() + timedelta(days=i)).strftime("%Y-%m-%d")
            keyboard.add(day)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: {selected_service['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", reply_markup=keyboard)
        return

    if state.get('step') == 'choose_date':
        try:
            datetime.strptime(text, "%Y-%m-%d")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        user_states[chat_id]['selected_date'] = text
        user_states[chat_id]['step'] = 'choose_time'

        service_id = user_states[chat_id]['selected_service']['id']
        slots = get_available_slots(service_id, text)
        if not slots:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            return

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for slot in slots:
            keyboard.add(slot['start'])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
        return

    if state.get('step') == 'choose_time':
        user_states[chat_id]['selected_time'] = text
        user_states[chat_id]['step'] = 'get_name'
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return

    if state.get('step') == 'get_name':
        user_states[chat_id]['name'] = text
        user_states[chat_id]['step'] = 'get_phone'
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    if state.get('step') == 'get_phone':
        user_states[chat_id]['phone'] = text

        data = user_states[chat_id]
        msg = f"üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n\nüí° –£—Å–ª—É–≥–∞: {data['selected_service']['name']}\nüóì –î–∞—Ç–∞: {data['selected_date']}\nüïí –í—Ä–µ–º—è: {data['selected_time']}\nüë§ –ò–º—è: {data['name']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"

        await bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. ‚ú®")
        await bot.send_message(ADMIN_CHAT_ID, msg)

        user_states.pop(chat_id, None)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == '__main__':
    delete_webhook()
    threading.Thread(target=run_flask).start()
    executor.start_polling(dp, skip_updates=True)
